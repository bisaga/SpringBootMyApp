/*
 * This file is generated by jOOQ.
*/
package com.bisaga.myapp.database.model.tables;


import com.bisaga.myapp.database.model.Keys;
import com.bisaga.myapp.database.model.Public;
import com.bisaga.myapp.database.model.tables.records.CurrencyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currency extends TableImpl<CurrencyRecord> {

    private static final long serialVersionUID = 1142821440;

    /**
     * The reference instance of <code>public.currency</code>
     */
    public static final Currency CURRENCY = new Currency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrencyRecord> getRecordType() {
        return CurrencyRecord.class;
    }

    /**
     * The column <code>public.currency.code</code>.
     */
    public final TableField<CurrencyRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(60).nullable(false), this, "");

    /**
     * The column <code>public.currency.abbreviation</code>.
     */
    public final TableField<CurrencyRecord, String> ABBREVIATION = createField("abbreviation", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "");

    /**
     * The column <code>public.currency.description</code>.
     */
    public final TableField<CurrencyRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.currency.row_id</code>.
     */
    public final TableField<CurrencyRecord, Integer> ROW_ID = createField("row_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('currency_row_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.currency.created_at</code>.
     */
    public final TableField<CurrencyRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.currency.created_by</code>.
     */
    public final TableField<CurrencyRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR.length(60).nullable(false), this, "");

    /**
     * The column <code>public.currency.modified_at</code>.
     */
    public final TableField<CurrencyRecord, Timestamp> MODIFIED_AT = createField("modified_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.currency.modified_by</code>.
     */
    public final TableField<CurrencyRecord, String> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "");

    /**
     * Create a <code>public.currency</code> table reference
     */
    public Currency() {
        this("currency", null);
    }

    /**
     * Create an aliased <code>public.currency</code> table reference
     */
    public Currency(String alias) {
        this(alias, CURRENCY);
    }

    private Currency(String alias, Table<CurrencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currency(String alias, Table<CurrencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CurrencyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CURRENCY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CurrencyRecord> getPrimaryKey() {
        return Keys.CURRENCY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CurrencyRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrencyRecord>>asList(Keys.CURRENCY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Currency as(String alias) {
        return new Currency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currency rename(String name) {
        return new Currency(name, null);
    }
}
